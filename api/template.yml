AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Globals:
  Function:
    Timeout: 10

Parameters:
  Environment:
    Type: String
    Description: Environment of template
  DomainName:
    Type: String
    Description: Domain name to attach to API Gateway
  HostedZoneId:
    Type: String
    Description: Id of HostedZone Managing DNS
  VpcId:
    Type: String
    Description: Id of the vpc the lambda functon will live in
  SubnetId1:
    Type: String
    Description: Id of the vpc subnet
  SubnetId2:
    Type: String
    Description: Id of the vpc subnet   
Resources:

  ApiGatewayLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: [ getThing ]
    Properties:
      LogGroupName: !Sub /aws/apigateway/${ApiGateway}
      RetentionInDays: 365

  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      OpenApiVersion: 3.0.3
      Name: !Sub ${AWS::StackName}
      StageName: !Ref Environment
      EndpointConfiguration:
        Type: REGIONAL      
      Cors:
        AllowMethods: "'GET'"
        AllowHeaders: "'Content-Type'"
        AllowOrigin: "'*'"
      Auth:
        UsagePlan:
          CreateUsagePlan: PER_API
          UsagePlanName: !Sub ${AWS::StackName}-${Environment}-UsagePlan
          Quota:
            Limit: 5000
            Period: DAY
          Throttle:
            BurstLimit: 200
            RateLimit: 100
          Description: API Usage Plan
      TracingEnabled: true
      CacheClusterEnabled: true
      CacheClusterSize: "0.5"
      MethodSettings:
        - LoggingLevel: INFO
          ResourcePath: '/*' # allows for logging on any resource
          HttpMethod: '*' # allows for logging on any method
          CachingEnabled: true
          CacheDataEncrypted: true
          CacheTtlInSeconds: 30
          MetricsEnabled: true
      AccessLogSetting:
        DestinationArn: !GetAtt ApiGatewayLogGroup.Arn
        Format: $context.extendedRequestId $context.identity.sourceIp $context.identity.caller $context.identity.user [$context.requestTime] "$context.httpMethod $context.resourcePath $context.protocol" $context.status $context.responseLength $context.requestId
      Domain:
        DomainName: !Ref DomainName
        CertificateArn: !Ref ACMCertificate
        EndpointConfiguration: REGIONAL
        Route53:
          HostedZoneId: !Ref HostedZoneId
  ACMCertificate:
    Type: "AWS::CertificateManager::Certificate"
    Properties:
      DomainName: !Ref DomainName
      DomainValidationOptions:
        - DomainName: !Ref DomainName
          HostedZoneId: !Ref HostedZoneId
      ValidationMethod: DNS
    DependsOn: ApiGateway
  ApiGatewayWebAcl:
    Type: AWS::WAFv2::WebACL
    Properties:
      DefaultAction:
        Allow: {}
      Scope: REGIONAL
      VisibilityConfig: 
        CloudWatchMetricsEnabled: true
        MetricName: web-acl
        SampledRequestsEnabled: true
      Rules:
        - Action:
            Block: {}
          Name: RateLimit
          Statement:
            RateBasedStatement:
              AggregateKeyType: IP
              Limit: 1500
          VisibilityConfig: 
            CloudWatchMetricsEnabled: true
            MetricName: rate-limit
            SampledRequestsEnabled: true
          Priority: 0
  ApiGatewayWebAclAssociations:
    Type: AWS::WAFv2::WebACLAssociation
    Properties: 
      ResourceArn: !Sub "arn:aws:apigateway:${AWS::Region}::/restapis/${ApiGateway}/stages/${ApiGateway.Stage}"
      WebACLArn: !GetAtt ApiGatewayWebAcl.Arn        

  GetThingLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: [ getThing ]
    Properties:
      LogGroupName: !Sub /aws/lambda/${getThing}
      RetentionInDays: 365

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Lambda function
      VpcId: !Ref VpcId

  getThing:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: deploy/
      Handler: getThing.handler
      Runtime: nodejs16.x
      ReservedConcurrentExecutions: 5
      Environment:
        Variables:
          NODE_ENV: !Ref Environment
      ReservedConcurrentExecutions: 5
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref SubnetId1
          - !Ref SubnetId2                         
      Events:
        getThing:
          Type: Api
          Properties:
            Path: /thing
            Method: get
            RestApiId: !Ref ApiGateway
      Tags:
        Compoze:Source: Compoze
        Compoze:Component: templatenametoreplace
        Compoze:Environment: !Ref Environment            

Outputs:
  ApiEndpoint:
    Value: !Sub https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}
